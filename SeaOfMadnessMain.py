#This is the sea of madness horror game
# -*- coding: utf-8 -*-
"""Untitled42.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qsu8me60EwizE_729zAeUBNQuNQRaQp2
"""

import sys
import os
import random
import time
import tkinter
from tkinter import *
from PIL import ImageTk, Image
from tkinter import messagebox

import logging
import logging.handlers as handlers
from datetime import datetime

import subprocess as s

from test import pid

test_pid = pid

def killProcess(pid):
    s.Popen('taskkill /F /PID {0}'.format(pid), shell=True)


game_over = False

# Setting up Log file name
time = str(datetime.now())
# print(time)

str_file = datetime.now().strftime('mylogfile_%Y-%m-%d_%H-%M')

# print(str_file)

log_filename = "./Logs/" + str_file + ".log"

logger = logging.getLogger(__name__)

logging.basicConfig(level=logging.INFO, filename=log_filename, filemode="w",
                            format="%(asctime)s - %(levelname)s - %(message)s")



handler = logging.FileHandler(log_filename)

formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)

logger.addHandler(handler)



# Creating Player Class for Adventurer
class player:
    def __init__(self, location, health, items, sanity):
        self.location = location
        self.health = health
        self.sanity = sanity    
        self.items = items

hero = player("entry", 100, 0, 100)


class GUI:
    
    # Initialzing main window for GUI
    def __init__(self, window):
        self.window = window

        


        window.title("Sea of MAdness")

        window.geometry("966x745+0+0")
        window.minsize(width=966, height=745)
        window.maxsize(width=966, height=745)


        frame = Frame(window)
        frame.pack()
        
        print("Medkits", hero.items)


        # Getting and setting up image
        
        self.img = ImageTk.PhotoImage(Image.open("Untitled-1.gif"))
        
        # Loading Background Image
        self.label = tkinter.Label(frame, image=self.img)
        self.label.pack()

        # Setting Basic buttons and Labels
        self.l1 = tkinter.Label(frame, text="Welcome, to the Sea of Madness")
        self.l1.pack()

        health_text = "HEALTH = " + str(hero.health)

        sanity_text = "SANITY =" + str(hero.sanity)

        self.l2 = tkinter.Label(frame, text=health_text, bg="Black", fg="White")
        self.l2.pack()

        self.l4 = tkinter.Label(frame, text=sanity_text, bg="Black", fg="White")
        self.l4.pack()

        medkit_text = "MEDKITS = " + str(hero.items)

        

        self.l3 = tkinter.Label(frame, text=medkit_text, bg="Black", fg="White")
        self.l3.pack()

        self.b1 = tkinter.Button(frame, width=15, height=3, text="START", command=self.Entry)
        self.b1.pack()

        self.yes_1 = tkinter.Button(frame, width=15, height=1, text="YES")
        # yes_1.pack()

        self.no_1 = tkinter.Button(frame, width=15, height=1, text="NO")
        # no_1.pack()

        self.use_medkit = tkinter.Button(frame, width=15, height=1, text="USE MEDKIT")

    # Function to make Medkit
    def medkit(self):
        medkit_find = random.choice([True, False])
        if medkit_find is True:
            hero.items += 1
            tkinter.messagebox.showinfo( "Medkit", "Medkit Found!!")
            medkit_text = "MEDKITS = " + str(hero.items)
            self.l3.configure(text=medkit_text)
            self.l3.pack()

    # Function to allow use of Medkit
    def using_medkit(self):
        logging.info("Using MedKit")
        if hero.items >= 1:
            hero.health = 100
            health_text = "HEALTH = " + str(hero.health)

            hero.items -= 1

            medkit_text = "MEDKITS = " + str(hero.items)
            self.l3.configure(text=medkit_text)
            self.l3.pack()

            self.l2.configure(text=health_text)

    # Function to handle Bat Attack
    def bat_attack(self):
        bat_attack = random.choice([True, False])
        if bat_attack is True:
            tkinter.messagebox.showinfo( "Attack", "Bat Attack!!")
            hero.health -= random.randint(1, 100)
            hero.sanity -= random.randint(1, 100)
            sanity_text = "SANITY = " + str(hero.sanity)
            health_text = "HEALTH = " + str(hero.health)
            self.l4.configure(text=sanity_text)
            self.l2.configure(text=health_text)

            # Killing the Game
            if hero.health <= 0:
                game_over = True
                print(game_over)
                
                logging.info("YOU DIED")
                tkinter.messagebox.showinfo( "Death", "You Died!!")
                self.window.destroy()
                # killProcess(test_pid)
                os._exit(0)
                # sys.exit()
            if hero.sanity <= 0:
                game_over = True
                print(game_over)
                logging.info("You succumbed to the darkness and lost your sanity")
                tkinter.messagebox.showinfo( "You Lost Your Mind", "You have lost your way. . .")
                self.window.destroy()

    

    # Creating Button function
    def create_btn(self, str, cmd):
        btn = self.tkinter.Button(self.frame, width=15, height=1, text=str, command=cmd)
        return btn


    # Clearin Frame of all widgets
    def clear_frame(self):
        for widgets in self.frame.winfo_children():
            widgets.destroy()

    # Function to change image
    def change_img(self,str):
        self.img2=ImageTk.PhotoImage(Image.open(str))
        self.label.configure(image=self.img2)
        self.label.image=self.img2



    # Starting of Game with 1st Stage
    def Entry(self):
        logging.info("Starting Game")
        self.change_img("360_F_526237957_LrMO49tJwbKHn5Sl4AR8OOCfcRWoAk8r.jpg")
        self.b1.destroy()
        
        self.yes_1.pack()
        self.no_1.pack()
        
        self.l2.pack()
        self.l1.config(text="You wake up, lost, confused, in a hallway with dim lighting. Do you go enter one of the doors infront of you?")


        # yes_1 = tkinter.Button(frame, width=15, height=1, text="YES" command=Kick)
        self.yes_1.configure(command=self.yes_kick)
        self.yes_1.pack()
        

        self.no_1.configure(command=self.no_kick)
        self.no_1.pack()

        self.use_medkit.configure(command=self.using_medkit)
        self.use_medkit.pack()


    # Choosing option YES
    def yes_kick(self):
        logging.info("YES")
        print("Location", hero.location)
        self.medkit()
        self.bat_attack()

        self.change_img("staircase.jpg")
        self.l1.config(text="You eventually find your way near a staircase that seems oddly familiar, do you go down the stairs?")
        self.yes_1.configure(command=self.Door)
        # yes_1.pack()

    # Choosing option NO
    def no_kick(self):
        logging.info("NO")
        self.change_img("bat.png")
        self.l1.config(text="A bat flies over your head and you hear screetches in the distance. You sit in total darkness wondering if there's a way out.")

    # Choosing option YES
    def Door(self):
        logging.info("YES")
        self.medkit()
        self.bat_attack()

        self.change_img("end_tunnel.jpg")
        self.l1.config(text="After climbing down the stairs you open a door. You see a long tunnel in front of you, with what looks like a light infront of you. Do you walk ahead?")
        self.l2.pack()
        self.no_1.configure(command=self.no_Door)
        self.yes_1.configure(command=self.Alarming)

    # Choosing option NO
    def no_Door(self):
        logging.info("NO")
        self.l1.config(text="You are injured because crocodile hits you. You are thinking any other way except using rope.")
        self.l2.pack()

    # Choosing option YES
    def Alarming(self):
        logging.info("YES")
        self.medkit()
        self.bat_attack()

        self.change_img("old_study.jpg ")
        self.l1.config(text="As you get to the end of the tunnel, you feel like it transported you to a different place, a calm place. Looks like an old study. Snoop around or keep going?")
        self.l2.pack()
        self.no_1.configure(command=self.no_Alarming)
        self.yes_1.configure(command=self.Cavern)

    # Choosing option NO
    def no_Alarming(self):
        logging.info("NO")
        self.l1.config(text="Your one leg and arm has burned because of fire.")
        self.l2.pack()

    # Choosing option YES
    def Cavern(self):
        logging.info("YES")
        self.medkit()
        self.bat_attack()

        self.change_img("Cavern.png")
        self.l1.config(text="You stumble into a dimly lit cavern. You cannot go right or left but the cave continues ahead. Will you go on?")
        self.l2.pack()
        self.no_1.configure(command=self.no_Cavern)
        self.yes_1.configure(command=self.Hallway)

    # Choosing option NO
    def no_Cavern(self):
        logging.info("NO")
        self.l1.config(text="You sit down and eat some food you brought with you.")
        self.l2.pack()

    # Choosing option YES
    def Hallway(self):
        logging.info("YES")
        self.medkit()
        self.bat_attack()

        self.change_img("hallway.png")
        self.l1.config(text="You are in a wide hallway. It continues on indefinitely. There's no turning back. Will you go on?")
        self.l2.pack()
        self.no_1.configure(command=self.no_Hallway)
        self.yes_1.configure(command=self.Pit)

    # Choosing option NO
    def no_Hallway(self):
        logging.info("NO")
        self.l1.config(text="You try to call your help but no one is there.")
        self.l2.pack()

    # Choosing option YES
    def Pit(self):
        logging.info("YES")
        self.medkit()
        self.bat_attack()

        self.change_img("Pit.png")
        self.l1.config(text="You fall head first into an ominous and languid pit. Luckly, you only landed on your back. You can try to climb out. Will you try?")
        self.l2.pack()
        self.no_1.configure(command=self.no_Pit)
        self.yes_1.configure(command=self.Gold)

    # Choosing option NO
    def no_Pit(self):
        logging.info("NO")
        self.l1.config(text="You sit in utter darkness.")
        self.l2.pack()

    # Choosing option YES
    def Gold(self):
        logging.info("YES")
        self.change_img("Gold.png")
        self.l1.config(text="You reached to your final destination.Finally, you can see gold. You can take the gold. Will you take?")
        self.l2.pack()
        self.no_1.configure(command=self.Lose)
        self.yes_1.configure(command=self.Win)

    # Choosing option NO
    def Lose(self):
        logging.info("LOSE")
        self.change_img("Lose.png")
        self.l1.config(text="You did not take the Gold. GAME OVER!")

    # Choosing option YES
    def Win(self):
        logging.info("WON")
        self.change_img("Win.png")
        self.l1.config(text="You took enough gold. GAME OVER!")
        self.l2.pack()


class Game:

    def print_slow(self, str, delay=0.1):
        for letter in str:
            sys.stdout.write(letter)
            sys.stdout.flush()
            time.sleep(delay)
        print("\n")


    def reset_console(self):
        print("\n")
        os.system('cls||clear')


    def fprint(self, str, delay=0):
        print("\n" + str)
        time.sleep(delay)


    def sprint(self, str, delay=0):
        print(str)
        time.sleep(delay)


game_functions = Game()

class World:

    def entry(self):
        hero.location = "entry"
        print(f"\nHealth: {hero.health}")
        game_functions.fprint("You are in a dark cave. The entry has been sealed by fallen rocks. There is no way out.", 2)
        print("Ahead, you can see a door. Will you continue?")
        print("Enter 'yes' or 'no'.")
        self.check_medkit()
        self.handle_goblin()
        while True:
            action = input("\n> ")
            if action == "yes":
                self.door()
            elif action == "no":
                game_functions.fprint("A bat flies over your head and you hear screetches in the distance.")
            elif action == "m":
                self.use_medkit()
            else:
                game_functions.fprint("You sit in total darkness wondering if there's a way out.")

    def door(self):
        hero.location = "door"
        print(f"\nHealth: {hero.health}")
        game_functions.fprint("Door is opened by kick. Contains fast wind.", 2)
        print("Hero crawls to groung and reach end. Will you crawl?")
        print("Enter 'yes' or 'no'.")
        self.check_medkit()
        self.handle_goblin()
        while True:
            action = input("\n> ")
            if action == "yes":
                self.lake()
            elif action == "no":
                game_functions.fprint("You hear loud voices of wind.")
            elif action == "m":
                self.use_medkit()
            else:
                game_functions.fprint("You are scare of voices.")

    def lake(self):
        hero.location = "lake"
        print(f"\nHealth: {hero.health}")
        game_functions.fprint("It's a long lake and there are two crocodiles in it.", 2)
        print("Ahead, you can see a rope. Will you swing from rope to get to end point?")
        print("Enter 'yes' or 'no'.")
        self.check_medkit()
        self.handle_goblin()
        while True:
            action = input("\n> ")
            if action == "yes":
                self.alarming()
            elif action == "no":
                game_functions.fprint("You are injured because crocodile hits you.")
            elif action == "m":
                self.use_medkit()
            else:
                game_functions.fprint("You are thinking any other way except using rope.")

    def alarming(self):
        hero.location = "alarming"
        print(f"\nHealth: {hero.health}")
        game_functions.fprint("Space contains fire with sand dunes.", 2)
        print("Hero puts off fire with sand. Will you do this?")
        print("Enter 'yes' or 'no'.")
        self.check_medkit()
        while True:
            action = input("\n> ")
            if action == "yes":
                self.cavern()
            elif action == "no":
                game_functions.fprint("Your one leg and arm has burned because of fire.")
            elif action == "m":
                self.use_medkit()
            else:
                game_functions.fprint("You are feeling very hot.")

    def cavern(self):
        hero.location = "cavern"
        print(f"\nHealth: {hero.health}")
        game_functions.fprint("You stumble into a dimly lit cavern.", 2)
        print("You cannot go right or left but the cave continues ahead. Will you go on?")
        print("Enter 'yes' or 'no'.")
        self.check_bat_attack()
        self.handle_goblin()
        while True:
            action = input("\n> ")
            if action == "yes":
                self.hallway()
            elif action == "no":
                game_functions.fprint("You sit down and eat some food you brought with you.")
            elif action == "m":
                self.use_medkit()
            else:
                game_functions.fprint("You shiver from the cold.")

    def hallway(self):
        hero.location = "hallway"
        print(f"\nHealth: {hero.health}")
        game_functions.fprint("You are in a wide hallway. It continues on indefinitely.", 2)
        print("There's no turning back. Will you go on?")
        print("Enter 'yes' or 'no'.")
        self.handle_goblin()
        while True:
            action = input("\n> ")
            if action == "yes":
                self.pit()
            elif action == "no":
                game_functions.fprint("You try to call your help but no one is there.")
            elif action == "m":
                self.use_medkit()
            else:
                game_functions.fprint("You wonder what time it is.")

    def pit(self):
        hero.location = "pit"
        print(f"\nHealth: {hero.health}")
        game_functions.fprint("You fall head first into an ominous and languid pit. Luckly, you only landed on your back", 2)
        print("You can try to climb out. Will you try?")
        print("Enter 'yes' or 'no'.")
        self.handle_goblin()
        while True:
            action = input("\n> ")
            if action == "yes":
                self.gold()
            elif action == "no":
                game_functions.fprint("You sit in utter darkness.")
            elif action == "m":
                self.use_medkit()
            else:
                game_functions.fprint("You feel hopeless.")

    def gold(self):
        hero.location = "gold"
        print(f"\nHealth: {hero.health}")
        game_functions.fprint("You reached to your final destination.", 2)
        game_functions.sprint("Finally, you can see gold.", 2)
        print("You can take the gold. Will you take?")
        print("Enter 'yes' or 'no'.")
        while True:
            action = input("\n> ")
            if action == "yes":
                game_functions.fprint("You take enough gold.", 2)
                print("GAME OVER.")
                sys.exit()
            elif action == "no":
                game_functions.fprint("You don't find the gold, you lose.")
            elif action == "m":
                self.use_medkit()
            else:
                game_functions.fprint("You give up.")




    def use_medkit(self):
        if "medkit" in hero.items:
            hero.items -= 1
            game_functions.fprint("You used your medkit")
            hero.health = 100
            print(f"\nHealth: {hero.health}")
        else:
            game_functions.fprint("You don't have a medkit.")



    def check_medkit(self):
        medkit_find = random.choice([True, False])
        if medkit_find is True:
            hero.items += 1
            game_functions.fprint("You found a medkit!", 2)
            print("Enter 'm' to use it.")


    def check_bat_attack(self):
        bat_attack = random.choice([True, False])
        if bat_attack is True:
            game_functions.fprint("You were attacked by a bat!", 2)
            hero.health -= random.randint(1, 100)
            print(f"\nHealth: {hero.health}")
            if hero.health == 0:
                game_functions.fprint("You are dead!")
                sys.exit()

def test_run():
    root = Tk()
    gui = GUI(root)
    root.mainloop()
    pass

if __name__ == '__main__':
    # Running the main GUI object
    root = Tk()
    gui = GUI(root)
    root.mainloop()

    # new_world = World()


    # new_world.entry()
